name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.0)'
        required: true
        default: '1.0.0'
      language:
        description: 'README语言 (zh/en)'
        required: false
        default: 'zh'
        type: choice
        options:
        - zh
        - en
      draft:
        description: '是否创建草稿版本'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.1'
        channel: 'stable'
        cache: true
        
    - name: 启用Windows桌面支持
      run: flutter config --enable-windows-desktop
      
    - name: 获取依赖
      run: flutter pub get
      
    - name: 构建Windows Release版本
      run: flutter build windows --release
      
    - name: 获取版本信息
      id: version
      run: |
        if ("${{ github.event.inputs.version }}" -ne "") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = Select-String -Path "pubspec.yaml" -Pattern "version: (.+)" | ForEach-Object { $_.Matches.Groups[1].Value }
          $version = $version.Split('+')[0]
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "BUILD_NAME=light_novel_image-v$version-windows-x64" >> $env:GITHUB_OUTPUT
      shell: powershell
      
    - name: 打包Windows版本
      run: |
        $buildName = "${{ steps.version.outputs.BUILD_NAME }}"
        mkdir release
        Copy-Item -Recurse "build\windows\x64\runner\Release\*" "release\"
        
        # 根据语言选择模板文件
        $language = "${{ github.event.inputs.language }}"
        if ([string]::IsNullOrEmpty($language)) {
          $language = "zh"
        }
        
        if ($language -eq "en") {
          $templatePath = ".github\templates\README_WINDOWS_EN.txt"
        } else {
          $templatePath = ".github\templates\README_WINDOWS.txt"
        }
        
        $version = "${{ steps.version.outputs.VERSION }}"
        $repository = "${{ github.repository }}"
        $buildTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
        
        # 读取模板文件并替换占位符
        $readmeContent = Get-Content -Path $templatePath -Encoding UTF8 -Raw
        $readmeContent = $readmeContent -replace '\{\{VERSION\}\}', $version
        $readmeContent = $readmeContent -replace '\{\{REPOSITORY\}\}', $repository
        $readmeContent = $readmeContent -replace '\{\{BUILD_TIME\}\}', $buildTime
        
        # 写入README文件
        $readmeContent | Out-File -FilePath "release\README.txt" -Encoding UTF8
        
        Compress-Archive -Path "release\*" -DestinationPath "$buildName.zip"
        echo "ZIP_NAME=$buildName.zip" >> $env:GITHUB_OUTPUT
      id: package
      shell: powershell
      
    - name: 计算文件哈希
      id: hash
      run: |
        $hash = Get-FileHash "${{ steps.package.outputs.ZIP_NAME }}" -Algorithm SHA256
        echo "SHA256=$($hash.Hash)" >> $env:GITHUB_OUTPUT
      shell: powershell
      
    - name: 生成Release描述
      id: release_body
      run: |
        # 根据语言选择Release描述模板文件
        $language = "${{ github.event.inputs.language }}"
        if ([string]::IsNullOrEmpty($language)) {
          $language = "zh"
        }
        
        if ($language -eq "en") {
          $releaseTemplatePath = ".github\templates\RELEASE_BODY_EN.txt"
        } else {
          $releaseTemplatePath = ".github\templates\RELEASE_BODY.txt"
        }
        
        $buildName = "${{ steps.version.outputs.BUILD_NAME }}"
        $zipName = "${{ steps.package.outputs.ZIP_NAME }}"
        $sha256 = "${{ steps.hash.outputs.SHA256 }}"
        $version = "${{ steps.version.outputs.VERSION }}"
        $repository = "${{ github.repository }}"
        $buildTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
        
        # 读取Release描述模板并替换占位符
        $releaseContent = Get-Content -Path $releaseTemplatePath -Encoding UTF8 -Raw
        $releaseContent = $releaseContent -replace '\{\{BUILD_NAME\}\}', $buildName
        $releaseContent = $releaseContent -replace '\{\{ZIP_NAME\}\}', $zipName
        $releaseContent = $releaseContent -replace '\{\{SHA256\}\}', $sha256
        $releaseContent = $releaseContent -replace '\{\{VERSION\}\}', $version
        $releaseContent = $releaseContent -replace '\{\{REPOSITORY\}\}', $repository
        $releaseContent = $releaseContent -replace '\{\{BUILD_TIME\}\}', $buildTime
        
        # 将多行内容输出到GITHUB_OUTPUT
        echo "content<<EOF" >> $env:GITHUB_OUTPUT
        echo $releaseContent >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT
      shell: powershell
      
    - name: 上传到Release
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.package.outputs.ZIP_NAME }}
        tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}
        name: ${{ github.event_name == 'workflow_dispatch' && format('Release v{0}', github.event.inputs.version) || github.ref_name }}
        body: ${{ steps.release_body.outputs.content }}
        draft: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.draft == 'true' || false }}
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.BUILD_NAME }}
        path: ${{ steps.package.outputs.ZIP_NAME }}
        retention-days: 90 