name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.0)'
        required: true
        default: '1.0.0'
      language:
        description: 'README语言 (zh/en)'
        required: false
        default: 'zh'
        type: choice
        options:
        - zh
        - en
      draft:
        description: '是否创建草稿版本'
        required: false
        default: true
        type: boolean
      update_pubspec:
        description: '是否同步更新pubspec.yaml版本号'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            flutter-target: windows
            build-command: flutter build windows --release
            executable: light_novel_image.exe
            template-suffix: WINDOWS
          - os: macos-latest
            platform: macos
            arch: arm64
            flutter-target: macos
            build-command: |
              cd macos
              xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/Runner.xcarchive archive EXCLUDED_ARCHS=x86_64 ARCHS=arm64 ONLY_ACTIVE_ARCH=NO
              xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/Release -exportOptionsPlist exportOptions.plist
              cd ..
            executable: light_novel_image.app
            template-suffix: MACOS_ARM64
          - os: macos-latest
            platform: macos
            arch: x64
            flutter-target: macos
            build-command: |
              cd macos
              xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/Runner.xcarchive archive EXCLUDED_ARCHS=arm64 ARCHS=x86_64 ONLY_ACTIVE_ARCH=NO
              xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/Release -exportOptionsPlist exportOptions.plist
              cd ..
            executable: light_novel_image.app
            template-suffix: MACOS_X64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: 获取版本信息
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          # 手动输入的版本号
          version="${{ github.event.inputs.version }}"
        else
          # 从pubspec.yaml获取版本号
          version=$(grep "version:" pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
        fi
        echo "VERSION=$version" >> $GITHUB_OUTPUT
        echo "BUILD_NAME=light_novel_image-v$version-${{ matrix.platform }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT
        echo "检测到版本号: $version"
      shell: bash
      
    - name: 更新pubspec.yaml版本号
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.update_pubspec == 'true'
      run: |
        version="${{ steps.version.outputs.VERSION }}"
        # 备份原文件
        cp pubspec.yaml pubspec.yaml.bak
        
        # 更新版本号（保持build number +1）
        if [ "${{ matrix.platform }}" = "windows" ]; then
          sed -i "s/^version: .*/version: $version+1/" pubspec.yaml
        else
          sed -i '' "s/^version: .*/version: $version+1/" pubspec.yaml
        fi
        
        echo "已更新pubspec.yaml版本号为: $version+1"
        
        # 显示变更
        echo "版本号变更:"
        diff pubspec.yaml.bak pubspec.yaml || true
      shell: bash
      
    - name: 提交pubspec.yaml变更
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.update_pubspec == 'true' && matrix.platform == 'windows'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        if git diff --quiet pubspec.yaml; then
          echo "版本号无变更，跳过提交"
        else
          git add pubspec.yaml
          git commit -m "chore: update version to ${{ steps.version.outputs.VERSION }}"
          git push
          echo "已提交pubspec.yaml版本号更新"
        fi
      shell: bash
        
    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.3'
        channel: 'stable'
        cache: true
        
    - name: 启用桌面支持
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          flutter config --enable-windows-desktop
        else
          flutter config --enable-macos-desktop
        fi
      shell: bash
      
    - name: 获取依赖
      run: flutter pub get
      
    - name: 准备 macOS 构建环境
      if: matrix.platform == 'macos'
      run: |
        # 创建 exportOptions.plist
        cat > macos/exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>mac-application</string>
          <key>signingStyle</key>
          <string>automatic</string>
        </dict>
        </plist>
        EOF
        
        # 首先运行 flutter build 生成必要的文件
        flutter build macos --release
      shell: bash
      
    - name: 构建Release版本
      run: ${{ matrix.build-command }}
      
    - name: 打包Windows版本
      if: matrix.platform == 'windows'
      run: |
        $buildName = "${{ steps.version.outputs.BUILD_NAME }}"
        mkdir release
        Copy-Item -Recurse "build\windows\x64\runner\Release\*" "release\"
        
        # 根据语言选择模板文件
        $language = "${{ github.event.inputs.language }}"
        if ([string]::IsNullOrEmpty($language)) {
          $language = "zh"
        }
        
        if ($language -eq "en") {
          $templatePath = ".github\templates\README_${{ matrix.template-suffix }}_EN.txt"
        } else {
          $templatePath = ".github\templates\README_${{ matrix.template-suffix }}.txt"
        }
        
        $version = "${{ steps.version.outputs.VERSION }}"
        $repository = "${{ github.repository }}"
        $buildTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
        
        # 读取模板文件并替换占位符
        $readmeContent = Get-Content -Path $templatePath -Encoding UTF8 -Raw
        $readmeContent = $readmeContent -replace '\{\{VERSION\}\}', $version
        $readmeContent = $readmeContent -replace '\{\{REPOSITORY\}\}', $repository
        $readmeContent = $readmeContent -replace '\{\{BUILD_TIME\}\}', $buildTime
        
        # 写入README文件
        $readmeContent | Out-File -FilePath "release\README.txt" -Encoding UTF8
        
        Compress-Archive -Path "release\*" -DestinationPath "$buildName.zip"
        echo "ZIP_NAME=$buildName.zip" >> $env:GITHUB_OUTPUT
      id: package-win
      shell: powershell
      
    - name: 打包macOS版本
      if: matrix.platform == 'macos'
      run: |
        buildName="${{ steps.version.outputs.BUILD_NAME }}"
        mkdir release
        cp -r macos/build/Release/${{ matrix.executable }} release/
        
        # 根据语言选择模板文件
        language="${{ github.event.inputs.language }}"
        if [ -z "$language" ]; then
          language="zh"
        fi
        
        if [ "$language" = "en" ]; then
          templatePath=".github/templates/README_${{ matrix.template-suffix }}_EN.txt"
        else
          templatePath=".github/templates/README_${{ matrix.template-suffix }}.txt"
        fi
        
        version="${{ steps.version.outputs.VERSION }}"
        repository="${{ github.repository }}"
        buildTime=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
        
        # 读取模板文件并替换占位符
        readmeContent=$(cat "$templatePath")
        readmeContent=${readmeContent//\{\{VERSION\}\}/$version}
        readmeContent=${readmeContent//\{\{REPOSITORY\}\}/$repository}
        readmeContent=${readmeContent//\{\{BUILD_TIME\}\}/$buildTime}
        
        # 写入README文件
        echo "$readmeContent" > release/README.txt
        
        # 创建zip文件
        cd release && zip -r "../$buildName.zip" . && cd ..
        echo "ZIP_NAME=$buildName.zip" >> $GITHUB_OUTPUT
      id: package-mac
      
    - name: 计算文件哈希 (Windows)
      if: matrix.platform == 'windows'
      id: hash-win
      run: |
        $zipName = "${{ steps.package-win.outputs.ZIP_NAME }}"
        $hash = Get-FileHash "$zipName" -Algorithm SHA256 | Select-Object -ExpandProperty Hash
        echo "SHA256=$hash" >> $env:GITHUB_OUTPUT
      shell: powershell
      
    - name: 计算文件哈希 (macOS)
      if: matrix.platform == 'macos'
      id: hash-mac
      run: |
        zipName="${{ steps.package-mac.outputs.ZIP_NAME }}"
        hash=$(shasum -a 256 "$zipName" | cut -d' ' -f1)
        echo "SHA256=$hash" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: 上传构建产物 (Windows)
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.BUILD_NAME }}
        path: ${{ steps.package-win.outputs.ZIP_NAME }}
        retention-days: 90
        
    - name: 上传构建产物 (macOS)
      if: matrix.platform == 'macos'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.BUILD_NAME }}
        path: ${{ steps.package-mac.outputs.ZIP_NAME }}
        retention-days: 90
      
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: 获取版本信息
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          # 手动输入的版本号
          version="${{ github.event.inputs.version }}"
        else
          # 从pubspec.yaml获取版本号
          version=$(grep "version:" pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
        fi
        echo "VERSION=$version" >> $GITHUB_OUTPUT
        echo "Release版本号: $version"
        
    - name: 生成Release描述
      id: release_body
      run: |
        # 根据语言选择Release描述模板文件
        language="${{ github.event.inputs.language }}"
        if [ -z "$language" ]; then
          language="zh"
        fi
        
        if [ "$language" = "en" ]; then
          releaseTemplatePath=".github/templates/RELEASE_BODY_EN.txt"
        else
          releaseTemplatePath=".github/templates/RELEASE_BODY.txt"
        fi
        
        version="${{ steps.version.outputs.VERSION }}"
        repository="${{ github.repository }}"
        buildTime=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
        
        # 获取构建产物信息
        windowsZip=$(find artifacts -name "*windows*" -type f | head -1 | xargs basename)
        macosArmZip=$(find artifacts -name "*macos*arm64*" -type f | head -1 | xargs basename)
        macosX64Zip=$(find artifacts -name "*macos*x64*" -type f | head -1 | xargs basename)
        
        windowsHash=$(find artifacts -name "*windows*" -type f | head -1 | xargs shasum -a 256 | cut -d' ' -f1)
        macosArmHash=$(find artifacts -name "*macos*arm64*" -type f | head -1 | xargs shasum -a 256 | cut -d' ' -f1)
        macosX64Hash=$(find artifacts -name "*macos*x64*" -type f | head -1 | xargs shasum -a 256 | cut -d' ' -f1)
        
        # 读取Release描述模板并替换占位符
        releaseContent=$(cat "$releaseTemplatePath")
        releaseContent=${releaseContent//\{\{VERSION\}\}/$version}
        releaseContent=${releaseContent//\{\{REPOSITORY\}\}/$repository}
        releaseContent=${releaseContent//\{\{BUILD_TIME\}\}/$buildTime}
        releaseContent=${releaseContent//\{\{WINDOWS_ZIP\}\}/$windowsZip}
        releaseContent=${releaseContent//\{\{MACOS_ARM64_ZIP\}\}/$macosArmZip}
        releaseContent=${releaseContent//\{\{MACOS_X64_ZIP\}\}/$macosX64Zip}
        releaseContent=${releaseContent//\{\{WINDOWS_SHA256\}\}/$windowsHash}
        releaseContent=${releaseContent//\{\{MACOS_ARM64_SHA256\}\}/$macosArmHash}
        releaseContent=${releaseContent//\{\{MACOS_X64_SHA256\}\}/$macosX64Hash}
        
        # 将多行内容输出到GITHUB_OUTPUT
        echo "content<<EOF" >> $GITHUB_OUTPUT
        echo "$releaseContent" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 创建Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*/*
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: ${{ steps.release_body.outputs.content }}
        draft: ${{ github.event.inputs.draft == 'true' }}
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 